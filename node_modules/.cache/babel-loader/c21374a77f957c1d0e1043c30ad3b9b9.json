{"ast":null,"code":"import _objectSpread from \"/Users/nuoee/Desktop/react-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axios from 'axios';\nimport http from '../utils/http';\nconst socket = io('ws://localhost:9093'); // 获取聊天列表\n\nconst MSG_LIST = 'MSG_LIST'; // 读取信息\n\nconst MSG_RECV = 'MSG_RECV'; // 标识已读\n\nconst MSG_READ = 'MSG_READ';\nconst ORDER_ID = 'ORDER_ID';\nconst initState = {\n  chatmsg: [],\n  users: {},\n  unread: 0,\n  orderId: ''\n};\nexport function chat(state = initState, action) {\n  switch (action.type) {\n    case ORDER_ID:\n      return _objectSpread({}, state, {\n        orderId: action.payload.orderId\n      });\n\n    case MSG_LIST:\n      return _objectSpread({}, state, {\n        users: action.payload.users,\n        chatmsg: action.payload.msgs,\n        unread: action.payload.msgs.filter(v => !v.read && v.to == action.payload.userid).length\n      });\n\n    case MSG_RECV:\n      const n = action.payload.to == action.userid ? 1 : 0;\n      return _objectSpread({}, state, {\n        chatmsg: [...state.chatmsg, action.payload],\n        unread: state.unread + n\n      });\n\n    case MSG_READ:\n      const _action$payload = action.payload,\n            from = _action$payload.from,\n            num = _action$payload.num;\n      return _objectSpread({}, state, {\n        chatmsg: state.chatmsg.map(v => _objectSpread({}, v, {\n          read: from == v.from ? true : v.read\n        })),\n        unread: state.unread - num\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction msgList(msgs, users, userid) {\n  return {\n    type: MSG_LIST,\n    payload: {\n      msgs,\n      users,\n      userid\n    }\n  };\n}\n\nfunction msgRecv(msg, userid) {\n  return {\n    userid,\n    type: MSG_RECV,\n    payload: msg\n  };\n}\n\nfunction msgRead({\n  from,\n  userid,\n  num\n}) {\n  return {\n    type: MSG_READ,\n    payload: {\n      from,\n      userid,\n      num\n    }\n  };\n}\n\nfunction saveOrderId({\n  orderId\n}) {\n  return {\n    type: ORDER_ID,\n    payload: {\n      orderId\n    }\n  };\n}\n\nexport function readMsg(from) {\n  return (dispatch, getState) => {\n    axios.post('/user/readmsg', {\n      from\n    }).then(res => {\n      const userid = getState().user._id;\n\n      if (res.status == 200 && res.data.code == 0) {\n        dispatch(msgRead({\n          userid,\n          from,\n          num: res.data.num\n        }));\n      }\n    });\n  };\n}\nexport function recvMsg() {\n  return (dispatch, getState) => {\n    socket.on('recvmsg', function (data) {\n      console.log('recvmsg', data);\n\n      const userid = getState().user._id;\n\n      dispatch(msgRecv(data, userid));\n    });\n  };\n}\nexport function sendMsg({\n  from,\n  to,\n  msg\n}) {\n  return dispatch => {\n    socket.emit('sendmsg', {\n      from,\n      to,\n      msg\n    });\n  };\n}\nexport function getMsgList() {\n  return (dispatch, getState) => {\n    axios.get('/user/getmsglist').then(res => {\n      if (res.status == 200 && res.data.code == 0) {\n        const userid = getState().user._id;\n\n        dispatch(msgList(res.data.msgs, res.data.users, userid));\n      }\n    });\n  };\n}\nexport function createOrder() {\n  return async dispatch => {\n    let buyType = this.state.currentWay === 0 ? '1' : this.state.currentWay === 1 ? '3' : '2';\n    http.post('exchange-trade-server/order/createOrder', {\n      dealAmount: this.state.dealAmount,\n      dealPrice: this.state.dealPrice,\n      dealVol: this.state.dealMoney,\n      buyType: buyType,\n      currencyType: this.state.coinName,\n      coinId: this.state.coinId,\n      unixTimestamps: new Date().getTime()\n    }).then(res => {\n      if (res.code === 200) {\n        dispatch(saveOrderId(res.data.data));\n      } else if (res.code === -8) {\n        this.getPrice();\n      } else if (res.code === -10) {\n        console.log('去登陆', res.code);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/nuoee/Desktop/react-demo/src/redux/exchange.redux.js"],"names":["axios","http","socket","io","MSG_LIST","MSG_RECV","MSG_READ","ORDER_ID","initState","chatmsg","users","unread","orderId","chat","state","action","type","payload","msgs","filter","v","read","to","userid","length","n","from","num","map","msgList","msgRecv","msg","msgRead","saveOrderId","readMsg","dispatch","getState","post","then","res","user","_id","status","data","code","recvMsg","on","console","log","sendMsg","emit","getMsgList","get","createOrder","buyType","currentWay","dealAmount","dealPrice","dealVol","dealMoney","currencyType","coinName","coinId","unixTimestamps","Date","getTime","getPrice"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport http from '../utils/http'\nconst socket = io('ws://localhost:9093')\n// 获取聊天列表\nconst MSG_LIST = 'MSG_LIST'\n// 读取信息\nconst MSG_RECV = 'MSG_RECV'\n// 标识已读\nconst MSG_READ = 'MSG_READ'\n\nconst ORDER_ID = 'ORDER_ID'\nconst initState = {\n\tchatmsg:[],\n\tusers:{},\n  unread:0,\n  orderId: ''\n}\n\nexport function chat(state=initState, action){\n\tswitch(action.type){\n        case ORDER_ID:\n            return {...state,orderId:action.payload.orderId}\n\t\tcase MSG_LIST:\n\t\t\treturn {...state,users:action.payload.users, chatmsg:action.payload.msgs,unread:action.payload.msgs.filter(v=>!v.read&&v.to==action.payload.userid).length}\n\t\tcase MSG_RECV:\n\t\t\tconst n = action.payload.to==action.userid?1:0\n\t\t\treturn {...state,chatmsg:[...state.chatmsg,action.payload],unread:state.unread+n}\n\t\tcase MSG_READ:\n\t\t\tconst {from, num} = action.payload\n\t\t\treturn {...state, chatmsg:state.chatmsg.map(v=>({...v,read:from==v.from?true:v.read})), unread:state.unread-num}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\nfunction msgList(msgs, users, userid){\n\treturn {type:MSG_LIST,payload:{msgs,users,userid}}\n}\nfunction msgRecv(msg,userid){\n\treturn {userid, type:MSG_RECV, payload:msg}\n}\nfunction msgRead({from,userid,num}){\n\treturn {type: MSG_READ, payload:{from,userid,num}}\n}\nfunction saveOrderId({orderId}){\n\treturn {type: ORDER_ID, payload:{orderId}}\n}\nexport function readMsg(from){\n\treturn (dispatch,getState)=>{\n\t\taxios.post('/user/readmsg',{from})\n\t\t\t.then(res=>{\n\t\t\t\tconst userid = getState().user._id\n\t\t\t\tif (res.status==200 && res.data.code==0) {\n\t\t\t\t\tdispatch(msgRead({userid,from,num:res.data.num}))\n\t\t\t\t}\n\t\t\t})\n\t}\n}\nexport function recvMsg(){\n\treturn (dispatch, getState)=>{\n\t\tsocket.on('recvmsg',function(data){\n\t\t\tconsole.log('recvmsg',data)\n\t\t\tconst userid = getState().user._id\n\t\t\tdispatch(msgRecv(data, userid))\n\t\t})\n\t}\n}\nexport function sendMsg({from ,to ,msg}){\n\treturn dispatch=>{\n\t\tsocket.emit('sendmsg',{from ,to ,msg})\n\t}\n\t\n}\nexport function getMsgList(){\n\treturn (dispatch,getState)=>{\n\t\taxios.get('/user/getmsglist')\n\t\t\t.then(res=>{\n\t\t\t\tif (res.status==200 && res.data.code==0) {\n\t\t\t\t\tconst userid = getState().user._id\n\t\t\t\t\tdispatch(msgList(res.data.msgs, res.data.users,userid))\n\t\t\t\t}\n\t\t\t})\n\t}\n}\nexport function createOrder(){\n\treturn async dispatch=>{\n        let buyType = this.state.currentWay === 0 ? '1' : this.state.currentWay === 1 ? '3' : '2'\n        http.post('exchange-trade-server/order/createOrder', {\n          dealAmount: this.state.dealAmount,\n          dealPrice: this.state.dealPrice,\n          dealVol: this.state.dealMoney,\n          buyType: buyType,\n          currencyType: this.state.coinName,\n          coinId: this.state.coinId,\n          unixTimestamps: new Date().getTime()\n        }).then(res => {\n          if (res.code === 200) {\n            dispatch(saveOrderId(res.data.data))\n          } else if (res.code === -8) {\n            this.getPrice()\n          } else if (res.code === -10) {\n            console.log('去登陆', res.code)\n          }\n        })\n\t}\n}"]},"metadata":{},"sourceType":"module"}