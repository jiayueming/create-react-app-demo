{"ast":null,"code":"import _objectSpread from \"/Users/nuoee/Desktop/react-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axios from 'axios';\nimport http from '../utils/http';\nimport { hashHistory } from 'react-router'; // 获取聊天列表\n\nconst MSG_LIST = 'MSG_LIST'; // 读取信息\n\nconst MSG_RECV = 'MSG_RECV'; // 标识已读\n\nconst MSG_READ = 'MSG_READ';\nconst ORDER_ID = 'ORDER_ID';\nconst initState = {\n  chatmsg: [],\n  users: {},\n  unread: 0,\n  orderId: ''\n};\nexport function exchange(state = initState, action) {\n  switch (action.type) {\n    case ORDER_ID:\n      console.log(action.payload);\n      return _objectSpread({}, state, {\n        orderId: action.payload.orderId\n      });\n\n    case MSG_LIST:\n      return _objectSpread({}, state, {\n        users: action.payload.users,\n        chatmsg: action.payload.msgs,\n        unread: action.payload.msgs.filter(v => !v.read && v.to == action.payload.userid).length\n      });\n\n    case MSG_RECV:\n      const n = action.payload.to == action.userid ? 1 : 0;\n      return _objectSpread({}, state, {\n        chatmsg: [...state.chatmsg, action.payload],\n        unread: state.unread + n\n      });\n\n    case MSG_READ:\n      const _action$payload = action.payload,\n            from = _action$payload.from,\n            num = _action$payload.num;\n      return _objectSpread({}, state, {\n        chatmsg: state.chatmsg.map(v => _objectSpread({}, v, {\n          read: from == v.from ? true : v.read\n        })),\n        unread: state.unread - num\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction msgList(msgs, users, userid) {\n  return {\n    type: MSG_LIST,\n    payload: {\n      msgs,\n      users,\n      userid\n    }\n  };\n}\n\nfunction msgRead({\n  from,\n  userid,\n  num\n}) {\n  return {\n    type: MSG_READ,\n    payload: {\n      from,\n      userid,\n      num\n    }\n  };\n}\n\nfunction saveOrderId(orderId) {\n  return {\n    type: ORDER_ID,\n    payload: {\n      orderId\n    }\n  };\n}\n\nexport function readMsg(from) {\n  return (dispatch, getState) => {\n    axios.post('/user/readmsg', {\n      from\n    }).then(res => {\n      const userid = getState().user._id;\n\n      if (res.status == 200 && res.data.code == 0) {\n        dispatch(msgRead({\n          userid,\n          from,\n          num: res.data.num\n        }));\n      }\n    });\n  };\n} // export function recvMsg(){\n// \treturn (dispatch, getState)=>{\n// \t\tsocket.on('recvmsg',function(data){\n// \t\t\tconsole.log('recvmsg',data)\n// \t\t\tconst userid = getState().user._id\n// \t\t\tdispatch(msgRecv(data, userid))\n// \t\t})\n// \t}\n// }\n// export function sendMsg({from ,to ,msg}){\n// \treturn dispatch=>{\n// \t\tsocket.emit('sendmsg',{from ,to ,msg})\n// \t}\n// }\n\nexport function getMsgList() {\n  return (dispatch, getState) => {\n    axios.get('/user/getmsglist').then(res => {\n      if (res.status == 200 && res.data.code == 0) {\n        const userid = getState().user._id;\n\n        dispatch(msgList(res.data.msgs, res.data.users, userid));\n      }\n    });\n  };\n}\nexport function createOrder(data) {\n  return async dispatch => {\n    http.post('exchange-trade-server/order/createOrder', data).then(res => {\n      if (res.code === 200) {\n        dispatch(saveOrderId(res.data.data));\n        this.props.history.push('/pay');\n      } else if (res.code === -1) {\n        dispatch(saveOrderId('270'));\n        hashHistory.push('/pay');\n        dispatch(saveOrderId(res.date));\n      } else if (res.code === -8) {} else if (res.code === -10) {\n        console.log('去登陆', res.code);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/nuoee/Desktop/react-demo/src/redux/exchange.redux.js"],"names":["axios","http","hashHistory","MSG_LIST","MSG_RECV","MSG_READ","ORDER_ID","initState","chatmsg","users","unread","orderId","exchange","state","action","type","console","log","payload","msgs","filter","v","read","to","userid","length","n","from","num","map","msgList","msgRead","saveOrderId","readMsg","dispatch","getState","post","then","res","user","_id","status","data","code","getMsgList","get","createOrder","props","history","push","date"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport http from '../utils/http'\nimport {hashHistory} from 'react-router'\n// 获取聊天列表\nconst MSG_LIST = 'MSG_LIST'\n// 读取信息\nconst MSG_RECV = 'MSG_RECV'\n// 标识已读\nconst MSG_READ = 'MSG_READ'\n\nconst ORDER_ID = 'ORDER_ID'\nconst initState = {\n\tchatmsg:[],\n\tusers:{},\n  unread:0,\n  orderId: ''\n}\n\nexport function exchange(state=initState, action){\n\tswitch(action.type){\n\t\tcase ORDER_ID:\n\t\tconsole.log(action.payload)\n\t\t\treturn {...state,orderId:action.payload.orderId}\n\t\tcase MSG_LIST:\n\t\t\treturn {...state,users:action.payload.users, chatmsg:action.payload.msgs,unread:action.payload.msgs.filter(v=>!v.read&&v.to==action.payload.userid).length}\n\t\tcase MSG_RECV:\n\t\t\tconst n = action.payload.to==action.userid?1:0\n\t\t\treturn {...state,chatmsg:[...state.chatmsg,action.payload],unread:state.unread+n}\n\t\tcase MSG_READ:\n\t\t\tconst {from, num} = action.payload\n\t\t\treturn {...state, chatmsg:state.chatmsg.map(v=>({...v,read:from==v.from?true:v.read})), unread:state.unread-num}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\nfunction msgList(msgs, users, userid){\n\treturn {type:MSG_LIST,payload:{msgs,users,userid}}\n}\nfunction msgRead({from,userid,num}){\n\treturn {type: MSG_READ, payload:{from,userid,num}}\n}\nfunction saveOrderId(orderId){\n\treturn {type: ORDER_ID, payload:{orderId}}\n}\nexport function readMsg(from){\n\treturn (dispatch,getState)=>{\n\t\taxios.post('/user/readmsg',{from})\n\t\t\t.then(res=>{\n\t\t\t\tconst userid = getState().user._id\n\t\t\t\tif (res.status==200 && res.data.code==0) {\n\t\t\t\t\tdispatch(msgRead({userid,from,num:res.data.num}))\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n// export function recvMsg(){\n// \treturn (dispatch, getState)=>{\n// \t\tsocket.on('recvmsg',function(data){\n// \t\t\tconsole.log('recvmsg',data)\n// \t\t\tconst userid = getState().user._id\n// \t\t\tdispatch(msgRecv(data, userid))\n// \t\t})\n// \t}\n// }\n// export function sendMsg({from ,to ,msg}){\n// \treturn dispatch=>{\n// \t\tsocket.emit('sendmsg',{from ,to ,msg})\n// \t}\n\t\n// }\nexport function getMsgList(){\n\treturn (dispatch,getState)=>{\n\t\taxios.get('/user/getmsglist')\n\t\t\t.then(res=>{\n\t\t\t\tif (res.status==200 && res.data.code==0) {\n\t\t\t\t\tconst userid = getState().user._id\n\t\t\t\t\tdispatch(msgList(res.data.msgs, res.data.users,userid))\n\t\t\t\t}\n\t\t\t})\n\t}\n}\nexport function createOrder(data){\n\treturn async dispatch=>{\n        http.post('exchange-trade-server/order/createOrder', data).then(res => {\n          if (res.code === 200) {\n\t\t\t\t\t\tdispatch(saveOrderId(res.data.data))\n\t\t\t\t\t\tthis.props.history.push('/pay')\n\t\t\t\t\t} else if (res.code === -1) {\n\t\t\t\t\t\tdispatch(saveOrderId('270'))\n\t\t\t\t\t\thashHistory.push('/pay')\n\t\t\t\t\t\tdispatch(saveOrderId(res.date))\n\t\t\t\t\t} else if (res.code === -8) {\n          } else if (res.code === -10) {\n            console.log('去登陆', res.code)\n          }\n        })\n\t}\n}"]},"metadata":{},"sourceType":"module"}